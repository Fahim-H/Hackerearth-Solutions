//https://www.hackerearth.com/problem/algorithm/connected-components-in-a-graph/

#include<bits/stdc++.h>
using namespace std;

#define endl '\n'
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
#define fraction() cout.unsetf(ios::floatfield); cout.precision(10); cout.setf(ios::fixed,ios::floatfield);
#define MOD 1e9+7
#include <ext/pb_ds/assoc_container.hpp>
using namespace __gnu_pbds;
typedef long long int ll;
typedef tree< ll, null_type, less_equal<ll>, rb_tree_tag, tree_order_statistics_node_update > ordered_set;
/// cout<<*X.find_by_order(1)<<endl; // finds the kth element
/// cout<<X.order_of_key(-5)<<endl;  // number of items in a set that are strictly smaller than our item

const int MX = 1e5+10;
bool vis[MX];
vector <int> adj[MX];

void DFS(int u){
    vis[u] = 1;
    for(auto v:adj[u]){
        if(!vis[v]){
            DFS(v);
        }
    }
}

int main(){
    optimize();

    int n,e; cin>>n>>e;
    for(int i=1; i<=e; i++){
        int u,v; cin>>u>>v;
        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    int cnt = 0;
    for(int i=1; i<=n; i++){
        if(!vis[i]){
            DFS(i);
            cnt++;
        }
    }

    cout<<cnt<<endl;

    return 0;
}
