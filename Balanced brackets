//https://www.hackerearth.com/practice/data-structures/stacks/basics-of-stacks/practice-problems/algorithm/balanced-brackets-3-4fc590c6/

#include<bits/stdc++.h>
#define optimize() ios_base::sync_with_stdio(0);cin.tie(0);cout.tie(0);
using namespace std;

bool isBalanced(char c1, char c2){
    return ((c1 == '(' && c2 == ')') || (c1=='{' && c2 == '}') || (c1=='[' && c2==']'));
}
int main()
{
    optimize();
    int n; cin>>n;
    while(n--){
        string line; cin>>line;
        stack <char> st;
        bool is = true;
        for(auto u : line){
            if(u == '(' || u == '{' || u == '['){
                st.push(u);
            }
            else{
                if(st.empty()){
                    is = false;
                    break;
                }
                else{
                    if(isBalanced(st.top(),u)){
                        st.pop();
                    }
                    else{
                        is = false;
                        break;
                    }
                }
            }
        }
        if(!st.empty())is=false;
        if(is)cout<<"YES"<<endl;
        else cout<<"NO"<<endl;
    }
    return 0;
}
